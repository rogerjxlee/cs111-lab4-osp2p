# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Roger Lee
Student ID: 704018489
Email: rogerl1993@gmail.com 

# Partner 2 (if you're working in a team)
Name: Andrew Shih
Student ID: 704032348
Email: ashihe828@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We achieved parallelization by forking before each peer download and upload.
The child processes executed their specififed download/upload task and then
exited. The parent process continues forking for each download/upload task
that it encounters. 

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

Filenames longer than FILENAMESIZ-1 overrun the filename buffer. Fixed by
making sure that when we are copying the file name string, we do not copy 
more than FILENAMESIZ. Also we must null terminate the file name in case of
overflow to ensure proper handling of the string.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

<<<<<<< HEAD


=======
We made sure to account for numerous things such as:

checking if the filename was too long, including the space needed for GET
and OSP2P.

stopping a peer from downloading from an invalid director by detecting 
if there was a '/' in the filename.

accounting for large numbers of peers by increasing the buffer size 
by 10 times in order to avoid unexpectedly disconnecting from the tracker

making sure that no peer is downloading too much from the files to
avoid monopolizing other peer's resources
>>>>>>> e288c3ebd64db8a37eb14e6a3fdf3442df55fe7b

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

Download: In evil mode, the program will send a GET request with a filename so
long that it will overflow the seeder's filename buffer. This should crash the
seeder with a segmentation fault. Since this code only sends a bunch of A
characters to the seeder, this buffer overflow will not be able to take control
of the seeder's computer. Since this attack would crash the seeder, it is an
attack on service. 

Upload: In evil mode, the program will continuously upload junk information to
the downloader. The peer will not be able to differentiate the junk information
from the file it is actually trying to download. Thus this will fill up the 
peer's memory with useless junk. This will not overwrite existing files, so
integrity is still intact, but the computer will become slower and be prevented
from downloading anything else.


# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
